@column-width: 60;
@gutter-width: 20;
@columns: 12;

body {
	@total-width: (@column-width*12) + (@gutter-width*12);
	
	padding: 0 ((@gutter-width*.5)/@total-width)*100%;
	margin: 0;
}

.row(@columns:@columns) {
    
	@total-width: (@column-width*@columns) + (@gutter-width*@columns);

	display: block;
	overflow: hidden;
	margin: 0 auto;
	width: 100%;
	
	width: ((@gutter-width + @total-width)/@total-width)*100%;
	margin: 0 ((@gutter-width*.5)/@total-width)*-100%;
}

.grid(@x,@columns:@columns, @gutter:@gutter-width) {
    
    /*
-moz-box-sizing: border-box;
    -webkit-box-sizing: border-box; 
    box-sizing: border-box;
*/
		
	@total-width: (@column-width*@columns) + (@gutter*@columns);

	display: block;
	overflow: hidden;
	float: left;

	width: ((((@gutter-width+@column-width)*@x)-@gutter) / @total-width) * 100%;
	margin: 0 ((@gutter*.5)/@total-width)*100%;
}

/* !Modified - added the gutter param so that you can override this mixin and specify a gutter for each set of columns. Also added padding param so you can factor for columns with padding */
.grid-2(@x,@columns:@columns, @gutter:@gutter-width, @padding:0) {

    @total-width: (@column-width*@columns) + (@gutter*@columns);

	display: inline;
	overflow: hidden;
	float: left;
	
	width: ((((@gutter-width+@column-width)*@x)-@gutter-width) / @total-width) * 100%;
	margin: 0 ((@gutter-width*.5)/@total-width)*100%;
	
	/* width: @total-width*((((@gutter-width+@column-width)*@x)-(@gutter+@padding*2)) / @_gridsystem-width); */
	/*
width: ((((@gutter-width+@column-width)*@x)-(@gutter+@padding*2)) / @total-width) * 100%;
	margin: 0 @total-width*((@gutter*.5)/@total-width);
*/
	/* padding: @total-width*((@padding)/@_gridsystem-width); */
}