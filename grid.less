@column-width: 60;
@gutter-width: 20;
@columns: 12;

body {
	@total-width: (@column-width*12) + (@gutter-width*12);
	
	padding: 0 ((@gutter-width*.5)/@total-width)*100%;
	margin: 0;
}


/**
* ROW
* @columns {int} number of columns in the grid
* @gutter {int} percentage width of gutters
* 
* Now factoring for optional gutter width. Browsers that dont support the box-sizing rule (<=IE7) will need to account for gutters on grid items. The gutter needs to be offset in the row mixin
*/
.row(@columns:@columns, @gutter:@gutter-width) {
    
	@total-width: (@column-width*@columns) + (@gutter-width*@columns);

	display: block;
	overflow: hidden;
	margin: 0 auto;
	width: 100%;
	
	width: ((@gutter + @total-width)/@total-width)*100%;
	margin: 0 ((@gutter*.5)/@total-width)*-100%;
}

/**
* COLUMN
* @x {int} number of columns each grid item should take up
* @columns {int} number of columns in the grid
* @gutter {int} percentage width of gutters
* @padding {int} percentage width of left and right padding on grid items
*
* Now factoring for optional gutter width and padding. Browsers that dont support the box-sizing rule (<=IE7) will need to account for padding and gutters on grid items. Both padding and gutter need to be offset from the item width in the grid mixin
* 
* TODO: We need to factor for borders in browsers that dont support box-sizing. This is difficult because borders can be specified as a pixel width and our calculations are in percentages. Borders are not allowed to be set as percentage widths.
*/
.grid(@x,@columns:@columns, @gutter:@gutter-width, @padding:0) {
    
    -moz-box-sizing: border-box;
    -webkit-box-sizing: border-box; 
    box-sizing: border-box;
		
	@total-width: (@column-width*@columns) + (@gutter*@columns);
    
	display: block;
	overflow: hidden;
	float: left;

	width: ((((@gutter+@column-width)*@x)-(@gutter+@padding*2)) / @total-width) * 100%;
	margin: 0 ((@gutter*.5)/@total-width)*100%;
	padding: 0 ((@padding)/@total-width)*100%;
}